# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc f3843d4b394850da86ac9ca080cfbc11c6251872c72a6f6e015769fbb3565132 # shrinks to gs = GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 3), (E.Pyro, 1), (E.Cryo, 2), (E.Electro, 2)]), char_states: CharStates { char_states: [CharState { char_id: KamisatoAyaka, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | TriggerEvent), responds_to_triggers: EnumSet(Switched), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(0, KamisatoArtSenho), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, CryoElementalInfusion), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 2), (E.Hydro, 1), (E.Electro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(13252538051310632790), _hash: ZobristHasher(13252538051310632790) } }
cc dffba5f2c0e54dd07e70f3d20e0f6c91a5e18ad862851f8e8671a2bb9345deba # shrinks to gs = GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 3), (E.Pyro, 2), (E.Cryo, 1), (E.Electro, 2)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 2), (E.Hydro, 1), (E.Electro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(18445687557461064440), _hash: ZobristHasher(18445687557461064440) }
cc 0253f9ed3c3196c6fe2ed708ad38559a074f952a8183818badbbefd57e111575 # shrinks to gs = GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 3), (E.Pyro, 2), (E.Cryo, 1), (E.Electro, 2)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 2), (E.Hydro, 1), (E.Electro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(18445687557461064440), _hash: ZobristHasher(18445687557461064440) } }
cc a5a5ed25f188a1b283aed63694235361890b3dbfc5be8afbcf0189772f70066b # shrinks to gs = GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 3), (E.Pyro, 2), (E.Cryo, 1), (E.Electro, 2)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 2), (E.Hydro, 1), (E.Electro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(18445687557461064440), _hash: ZobristHasher(18445687557461064440) }
