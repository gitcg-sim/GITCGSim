# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 2e8dcb1478206c40de76326942e022200704c03139f9f2fec5591845abca0634 # shrinks to gs = GameState { pending_cmds: None, round_number: 5, phase: ActionPhase { first_end_round: None, active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 6), (E.Pyro, 1), (E.Hydro, 2), (E.Cryo, 4), (E.Electro, 2), (E.Geo, 5), (E.Anemo, 2)]), char_states: CharStates { char_states: [CharState { char_id: Diona, hp: 10, energy: 0, applied: EnumSet(Electro), flags: EnumSet(), total_dmg_taken: 2 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [ColdBloodedStrike, LotusFlowerCrisp, MushroomPizza, SweetMadame, SacrificialSword], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 5), (E.Pyro, 6), (E.Cryo, 2), (E.Electro, 12), (E.Dendro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Razor, hp: 3, energy: 1, applied: EnumSet(Cryo), flags: EnumSet(), total_dmg_taken: 7 }, CharState { char_id: Xiangling, hp: 8, energy: 0, applied: EnumSet(Cryo), flags: EnumSet(), total_dmg_taken: 2 }, CharState { char_id: Chongyun, hp: 8, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 2 }] }, status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | DiceDistribution), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Equipment(2, Artifact, ThunderingFury), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [TheOverflow, SanguineRouge, KnightsOfFavoniusLibrary, CalxsArts, Wagner, SendOff, CalxsArts, AquilaFavonia], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(11108254896359178794), _hash: ZobristHasher(11108254896359178794) }, n = 10515627654200275329
cc cf47975ede1b9c21ef2f6eb2ec3679985b3a0d76e2984041eae13b196c49ecf0 # shrinks to gs = GameState { pending_cmds: None, round_number: 3, phase: WinnerDecided { winner: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 4), (E.Pyro, 2), (E.Cryo, 2), (E.Electro, 2), (E.Dendro, 1), (E.Geo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Nilou, hp: 2, energy: 2, applied: EnumSet(Electro), flags: EnumSet(SkillCastedThisTurn1), total_dmg_taken: 8 }, CharState { char_id: Xiangling, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }, CharState { char_id: Diluc, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | OutgoingDMG), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(2, SearingOnslaughtCounter), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 1), (E.Hydro, 1), (E.Cryo, 2), (E.Dendro, 4), (E.Geo, 2), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Cyno, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_Skill | Skill_Self_Burst), _status_entries: [StatusEntry { key: Equipment(0, Artifact, LuckyDogsSilverCirclet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [SkywardSpine, WangshuInn, WineStainedTricorne, LithicSpear, ChangingShifts, BlizzardStrayer], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(13341701959701142491), _hash: ZobristHasher(13341701959701142491) }, n = 16407753678923990689
cc 89c31a4e96e0e2cf456d75727e3ebd5cfbc581f132c58681b93cb48720a51372 # shrinks to gs = GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { state: Start { to_select: PlayerFirst } }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(4859632520280752661), _hash: ZobristHasher(4859632520280752661) }, n = 0
cc 43daeda60388963891f9cfec61274ef5c70f0769445ac5956690095676cd87cc # shrinks to gs = GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { state: Start { to_select: PlayerFirst } }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(4859632520280752661), _hash: ZobristHasher(4859632520280752661) }, n = 0, m = 0
