# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 127de711ceae2a8b5284b33a32ed6487e90196543e20f072f1234aeda758eb7f # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 4, phase: ActionPhase { first_end_round: None, active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 5), (E.Pyro, 3), (E.Cryo, 1), (E.Electro, 1), (E.Dendro, 2), (E.Geo, 1), (E.Anemo, 1)]), char_states: [CharState { char_id: Xiangling, hp: 8, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Yanfei, hp: 4, energy: 1, applied: EnumSet(Electro), flags: EnumSet() }, CharState { char_id: Tartaglia, hp: 7, energy: 0, applied: EnumSet(Electro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | DiceDistribution | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_NA | Skill_Self_Skill), _status_entries: [StatusEntry { key: Character(2, RangedStance), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(1, Artifact, DeepwoodMemories), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [Katheryne, PaidInFull, MysticalAbandon, ElementalResonanceSprawlingGreenery, ThunderingFury], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 5), (E.Pyro, 1), (E.Hydro, 1), (E.Cryo, 1), (E.Electro, 4), (E.Dendro, 2), (E.Anemo, 3)]), char_states: [CharState { char_id: KujouSara, hp: 9, energy: 1, applied: EnumSet(Pyro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_Burst), _status_entries: [StatusEntry { key: Equipment(0, Artifact, ExilesCirclet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(TenguJuuraiStormcluster), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, CrowfeatherCover), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [PoundingSurprise, KeenSight, Crossfire, ElementalResonanceSprawlingGreenery], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, tactical: false, _incremental_hash: ZobristHasher(12737752266322612674), _hash: ZobristHasher(18382703634673079752) } }, P1(PlayCard(ElementalResonanceSprawlingGreenery, None)))
cc 62b011de9443b8b512bcc71f2efe2b117082970a3abecf6a804bb22b9327be62 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 4, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([(E.Hydro, 3), (E.Cryo, 1), (E.Electro, 1), (E.Dendro, 2), (E.Geo, 2), (E.Anemo, 2)]), char_states: [CharState { char_id: Candace, hp: 3, energy: 2, applied: EnumSet(Dendro), flags: EnumSet(SkillCastedThisTurn0) }], status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 3), (E.Hydro, 3), (E.Cryo, 5), (E.Electro, 2), (E.Dendro, 1), (E.Geo, 2), (E.Anemo, 2)]), char_states: [CharState { char_id: Collei, hp: 2, energy: 1, applied: EnumSet(Hydro), flags: EnumSet() }, CharState { char_id: Tighnari, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | OutgoingDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(DMG_Self_NR_ND | DMG_Self_NR_D | DMG_Self_R_ND | DMG_Self_R_D), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: true, tactical: false, _incremental_hash: ZobristHasher(10775317567387081129), _hash: ZobristHasher(17211177052774782746) } }, P0(CastSkill(SacredRiteHeronsSanctum)))
cc edf3951dba302ec9901bed3999a582409fc24e30d5882d1b5fe12af87d79a71e # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 4, phase: ActionPhase { first_end_round: None, active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([(E.Pyro, 5), (E.Hydro, 4), (E.Cryo, 1), (E.Geo, 3), (E.Anemo, 4)]), char_states: [CharState { char_id: Beidou, hp: 2, energy: 3, applied: EnumSet(Cryo), flags: EnumSet(SkillCastedThisTurn1) }], status_collection: StatusCollection { responds_to: EnumSet(TriggerEvent | PreparingSkill), responds_to_triggers: EnumSet(Switched), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(0, TidecallerSurfEmbrace), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet() }, PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 2), (E.Pyro, 1), (E.Cryo, 3)]), char_states: [CharState { char_id: Amber, hp: 8, energy: 1, applied: EnumSet(Electro), flags: EnumSet() }, CharState { char_id: Collei, hp: 8, energy: 1, applied: EnumSet(Electro), flags: EnumSet() }, CharState { char_id: KamisatoAyaka, hp: 6, energy: 2, applied: EnumSet(Electro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | TriggerEvent), responds_to_triggers: EnumSet(Switched), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(2, KamisatoArtSenho), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(1, Artifact, BrokenRimesEcho), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [GrandExpectation, ElementalResonanceWovenStone], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: true, tactical: false, _incremental_hash: ZobristHasher(12772207336121555791), _hash: ZobristHasher(14586036097859786236) } }, P1(SwitchCharacter(2)))
cc 0a46d7eef799416d7bbf8981948694044b39310d2fce621d1897ebd9b7847277 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: Some(PendingCommands { suspended_state: PostDeathSwitch { player_id: PlayerFirst, character_statuses_to_shift: [None, None] }, pending_cmds: [(CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, TriggerXEvent(DMG(XEventDMG { src_player_id: PlayerSecond, tgt_char_idx: 0, dmg_value: 5, dmg_type: Elemental(Hydro), dmg_info: DMGInfo { target_hp: 4, target_affected_by_riptide: true }, reaction: None, defeated: true }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, ApplyCharacterStatusToActive(PlayerFirst, Riptide, AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true })), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, AddEnergy(1)), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, TriggerXEvent(Skill(XEventSkill { src_player_id: PlayerSecond, src_char_idx: 0, skill_id: CuttingTorrent }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, HandOverPlayer)] }), round_number: 3, phase: ActionPhase { first_end_round: Some(PlayerFirst), active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 3), (E.Pyro, 2), (E.Hydro, 1), (E.Cryo, 1), (E.Electro, 2), (E.Anemo, 1)]), char_states: [CharState { char_id: Klee, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: RaidenShogun, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | IncomingDMG | OutgoingDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_Burst), _status_entries: [StatusEntry { key: Character(1, ChakraDesiderata), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(ChargedAttack | DiedThisRound) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 2), (E.Hydro, 2)]), char_states: [CharState { char_id: Tartaglia, hp: 4, energy: 3, applied: EnumSet(Pyro), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn1) }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | OutgoingDMG | DiceDistribution | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_NA), _status_entries: [StatusEntry { key: Character(0, MeleeStance), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, SangonomiyaShrine), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(0, Weapon, SkywardHarp), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }, StatusEntry { key: Equipment(0, Artifact, ThunderingFury), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: true, tactical: false, _incremental_hash: ZobristHasher(14952200370182808962), _hash: ZobristHasher(11136987550780311186) } }, P0(PostDeathSwitch(1)))
cc e69127ba17725fc1edbb5a06567b7b17753033c21030c07dc65e2be2b32b6102 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: Some(PendingCommands { suspended_state: PostDeathSwitch { player_id: PlayerFirst, character_statuses_to_shift: [None, None] }, pending_cmds: [(CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, TriggerXEvent(DMG(XEventDMG { src_player_id: PlayerSecond, tgt_char_idx: 2, dmg_value: 2, dmg_type: Elemental(Hydro), dmg_info: DMGInfo { target_hp: 2, target_affected_by_riptide: true }, reaction: None, defeated: true }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, ApplyCharacterStatusToActive(PlayerFirst, Riptide, AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true })), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, DeleteStatus(Character(0, RangedStance))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, ApplyStatusToCharacter(MeleeStance, 0)), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, AddEnergy(1)), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, TriggerXEvent(Skill(XEventSkill { src_player_id: PlayerSecond, src_char_idx: 0, skill_id: FoulLegacyRagingTide }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: FoulLegacyRagingTide }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 2 }) }, HandOverPlayer)] }), round_number: 3, phase: ActionPhase { first_end_round: Some(PlayerFirst), active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_index: 2, dice: DiceCounter([(Omni, 4), (E.Hydro, 1), (E.Cryo, 2), (E.Electro, 1), (E.Geo, 1)]), char_states: [CharState { char_id: KamisatoAyaka, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: StonehideLawachurl, hp: 8, energy: 2, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Keqing, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | IncomingDMG | OutgoingDMG | DiceDistribution | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase | Switched), responds_to_events: EnumSet(DMG_Opp_NR_ND | DMG_Opp_NR_D | DMG_Opp_R_ND | DMG_Opp_R_D | Skill_Self_Burst), _status_entries: [StatusEntry { key: Character(0, KamisatoArtSenho), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(1, Stonehide), state: AppliedEffectState { usages_duration: 3, counter: 0, once_per_round: true } }, StatusEntry { key: Character(1, StoneForce), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(1, Artifact, ExilesCirclet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(2, Artifact, BlizzardStrayer), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, Wagner), state: AppliedEffectState { usages_duration: 0, counter: 3, once_per_round: true } }] }, hand: [AThousandFloatingDreams, Crossfire, MaskOfSolitudeBasalt, WhenTheCraneReturned], flags: EnumSet(DiedThisRound) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 4), (E.Cryo, 1), (E.Geo, 1)]), char_states: [CharState { char_id: Tartaglia, hp: 5, energy: 3, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn1) }], status_collection: StatusCollection { responds_to: EnumSet(TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_NA), _status_entries: [StatusEntry { key: Character(0, RangedStance), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: true, tactical: false, _incremental_hash: ZobristHasher(12169890154798864964), _hash: ZobristHasher(7037083519334269278) } }, P0(PostDeathSwitch(1)))
cc 621317e6161a8f59e619a62da4ea609fd98659dc3f6e3ca404aa8d2ca2f3dd10 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: Some(PendingCommands { suspended_state: PostDeathSwitch { player_id: PlayerSecond, character_statuses_to_shift: [None, None] }, pending_cmds: [(CommandContext { src_player_id: PlayerFirst, src: Skill { char_idx: 2, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerSecond, char_idx: 1 }) }, TriggerXEvent(DMG(XEventDMG { src_player_id: PlayerFirst, tgt_char_idx: 1, dmg_value: 3, dmg_type: Elemental(Hydro), dmg_info: DMGInfo { target_hp: 3, target_affected_by_riptide: true }, reaction: None, defeated: true }))), (CommandContext { src_player_id: PlayerFirst, src: Skill { char_idx: 2, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerSecond, char_idx: 1 }) }, ApplyCharacterStatusToActive(PlayerSecond, Riptide, AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true })), (CommandContext { src_player_id: PlayerFirst, src: Skill { char_idx: 2, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerSecond, char_idx: 1 }) }, AddEnergy(1)), (CommandContext { src_player_id: PlayerFirst, src: Skill { char_idx: 2, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerSecond, char_idx: 1 }) }, TriggerXEvent(Skill(XEventSkill { src_player_id: PlayerFirst, src_char_idx: 2, skill_id: CuttingTorrent }))), (CommandContext { src_player_id: PlayerFirst, src: Skill { char_idx: 2, skill_id: CuttingTorrent }, tgt: Some(CommandTarget { player_id: PlayerSecond, char_idx: 1 }) }, HandOverPlayer)] }), round_number: 3, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 2, dice: DiceCounter([(Omni, 4), (E.Pyro, 1)]), char_states: [CharState { char_id: Beidou, hp: 10, energy: 2, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Xiangling, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Tartaglia, hp: 2, energy: 3, applied: EnumSet(Pyro), flags: EnumSet(SkillCastedThisTurn0) }], status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_NA), _status_entries: [StatusEntry { key: Support(Slot0, Liben), state: AppliedEffectState { usages_duration: 0, counter: 1, once_per_round: true } }, StatusEntry { key: Character(2, MeleeStance), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [KeenSight, AdventurersBandana, SkywardHarp], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 1), (E.Electro, 4), (E.Dendro, 1), (E.Geo, 7), (E.Anemo, 1)]), char_states: [CharState { char_id: Noelle, hp: 8, energy: 2, applied: EnumSet(Electro), flags: EnumSet() }, CharState { char_id: Bennett, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Keqing, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(IncomingDMG), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [ElementalResonanceWovenWaters], flags: EnumSet(ChargedAttack | DiedThisRound) }), log: EventLog { enabled: false }, ignore_costs: true, tactical: false, _incremental_hash: ZobristHasher(12994780459098615741), _hash: ZobristHasher(4781381898048430989) } }, P1(PostDeathSwitch(2)))
cc d054822f0add519765c3ceffa9400380d330607087d702fd62e9f2e282c5b294 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 5, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(E.Pyro, 1), (E.Electro, 1), (E.Dendro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: [CharState { char_id: Tartaglia, hp: 4, energy: 3, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn2) }, CharState { char_id: Beidou, hp: 3, energy: 0, applied: EnumSet(Pyro), flags: EnumSet(SkillCastedThisTurn2) }], status_collection: StatusCollection { responds_to: EnumSet(IncomingDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_NA), _status_entries: [StatusEntry { key: Character(1, ThunderbeastsTarge), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet() }, PlayerState { active_char_index: 2, dice: DiceCounter([(Omni, 2), (E.Pyro, 3), (E.Electro, 4)]), char_states: [CharState { char_id: FatuiPyroAgent, hp: 1, energy: 0, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn2) }, CharState { char_id: Fischl, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Keqing, hp: 7, energy: 0, applied: EnumSet(Hydro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | IncomingDMG | OutgoingDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_Skill), _status_entries: [StatusEntry { key: Equipment(1, Artifact, WineStainedTricorne), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(0, Artifact, WitchsScorchingHat), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }, StatusEntry { key: Equipment(2, Weapon, FavoniusSword), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, Riptide), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(DiedThisRound) }), log: EventLog { enabled: false }, ignore_costs: true, tactical: false, _incremental_hash: ZobristHasher(16407280415187289490), _hash: ZobristHasher(1428079086899279427) } }, P0(CastSkill(Oceanborne)))
cc ab2160da7832b348cefe200ecdd79799368aca2ac7a89d330e5defef1e310d51 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 2, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([]), char_states: [CharState { char_id: HuTao, hp: 6, energy: 1, applied: EnumSet(Cryo), flags: EnumSet(SkillCastedThisTurn0) }, CharState { char_id: StonehideLawachurl, hp: 5, energy: 0, applied: EnumSet(Pyro), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn1 | SkillCastedThisTurn2) }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | IncomingDMG | OutgoingDMG | OutgoingReactionDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(DMG_Opp_NR_ND | DMG_Opp_NR_D | DMG_Opp_R_ND | DMG_Opp_R_D | DMG_Self_NR_D | DMG_Self_R_D), _status_entries: [StatusEntry { key: Equipment(0, Artifact, WitchsScorchingHat), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }, StatusEntry { key: Equipment(1, Artifact, GamblersEarrings), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(1, Stonehide), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Character(1, StoneForce), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }, StatusEntry { key: Team(ElementalResonanceFerventFlames), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 1)]), char_states: [CharState { char_id: Shenhe, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Bennett, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | LateOutgoingDMG | DiceDistribution), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Equipment(1, Weapon, SkywardAtlas), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Team(IcyQuill), state: AppliedEffectState { usages_duration: 3, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, KnightsOfFavoniusLibrary), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [SendOff, IHaventLostYet], flags: EnumSet(DiedThisRound) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(8847372391717662311), _hash: ZobristHasher(6922687710621231018) } }, P0(EndRound))
cc 93d1f88a68141c235ff6d28613c643c7fb5b3c08b912ed00325c936b100e7e3f # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 6, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(E.Geo, 2)]), char_states: [CharState { char_id: Mona, hp: 4, energy: 3, applied: EnumSet(Hydro), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn2) }, CharState { char_id: Noelle, hp: 9, energy: 0, applied: EnumSet(Hydro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(OutgoingReactionDMG | SwitchIsFastAction), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(0, IllusoryTorrent), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 6), (E.Pyro, 10), (E.Hydro, 1), (E.Electro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: [CharState { char_id: Yoimiya, hp: 4, energy: 0, applied: EnumSet(Hydro), flags: EnumSet() }, CharState { char_id: Mona, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | OutgoingReactionDMG | SwitchIsFastAction), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(0, NiwabiEnshou), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(ChargedAttack | DiedThisRound) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(4063739915265271249), _hash: ZobristHasher(5919448448246398780) } }, P0(EndRound))
cc c412b0603435c841981352d41b948bbbf051b250b802ecbb06a7d6c7cbc55aa9 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 3), (E.Hydro, 1), (E.Cryo, 2), (E.Dendro, 1), (E.Geo, 1)]), char_states: [CharState { char_id: Ganyu, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 1), (E.Hydro, 1), (E.Cryo, 1), (E.Dendro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: [CharState { char_id: KamisatoAyaka, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(OutgoingDMG | TriggerEvent), responds_to_triggers: EnumSet(Switched), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(0, KamisatoArtSenho), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, CryoElementalInfusion), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(6160851323678591815), _hash: ZobristHasher(6160851323678591815) } }, P0(CastSkill(FrostflakeArrow)))
cc 14755249195be629b67cb4b1f1c638ebc03b5305225606000e6577794923bd71 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 5, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 3), (E.Cryo, 5), (E.Dendro, 8)]), char_states: [CharState { char_id: Collei, hp: 6, energy: 0, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn2) }, CharState { char_id: Ganyu, hp: 8, energy: 2, applied: EnumSet(Cryo), flags: EnumSet(SkillCastedThisTurn0) }], status_collection: StatusCollection { responds_to: EnumSet(IncomingDMG | TriggerEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Team(IceLotus), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(CuileinAnbar), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, IronTongueTian), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [ProphecyOfSubmersion], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 5), (E.Pyro, 4), (E.Hydro, 4), (E.Cryo, 10), (E.Dendro, 1), (E.Geo, 1), (E.Anemo, 4)]), char_states: [CharState { char_id: Ganyu, hp: 3, energy: 2, applied: EnumSet(Cryo | Dendro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [AquilaFavonia, TravelersHandySword, SacrificialGreatsword], flags: EnumSet(SkillCastedThisMatch) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(8353242288256463005), _hash: ZobristHasher(8353242288256463005) } }, P0(CastSkill(FrostflakeArrow)))
cc c319728cc291400d40e1317f01f6d98da70febd5b3179945fd6c6f3e5d61ad23 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 3, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 2), (E.Hydro, 5), (E.Cryo, 3)]), char_states: [CharState { char_id: StonehideLawachurl, hp: 8, energy: 2, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn1) }, CharState { char_id: Ganyu, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Barbara, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | IncomingDMG | OutgoingDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(DMG_Opp_NR_ND | DMG_Opp_NR_D | DMG_Opp_R_ND | DMG_Opp_R_D), _status_entries: [StatusEntry { key: Equipment(1, Artifact, LaurelCoronet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(0, Artifact, MaskOfSolitudeBasalt), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, Stonehide), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, StoneForce), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }] }, hand: [GrandExpectation], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 1), (E.Electro, 3), (E.Dendro, 6), (E.Anemo, 4)]), char_states: [CharState { char_id: Sucrose, hp: 3, energy: 1, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: YaeMiko, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: JadeplumeTerrorshroom, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(IncomingDMG | OutgoingDMG | TriggerEvent | SwitchIsFastAction), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(2, RadicalVitality), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, Katheryne), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: false } }] }, hand: [TheOverflow, SacrificialSword], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(13811517531436932126), _hash: ZobristHasher(13811517531436932126) } }, P0(CastSkill(FrostflakeArrow)))
cc b0173c9e10a27599c94aa6b487bda127b645a68469c2ff4af29cc3e4be9060a8 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 3, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([(E.Hydro, 3), (E.Electro, 2), (E.Dendro, 1), (E.Geo, 2), (E.Anemo, 1)]), char_states: [CharState { char_id: Kaeya, hp: 4, energy: 2, applied: EnumSet(Electro), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn1) }], status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 3), (E.Hydro, 2), (E.Cryo, 3), (E.Electro, 3), (E.Anemo, 1)]), char_states: [CharState { char_id: YaeMiko, hp: 6, energy: 1, applied: EnumSet(Cryo), flags: EnumSet() }, CharState { char_id: Barbara, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Kaeya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | TriggerEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Equipment(0, Artifact, LaurelCoronet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(MelodyLoop), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [], flags: EnumSet(ChargedAttack | DiedThisRound) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(16984070303121807718), _hash: ZobristHasher(16984070303121807718) } }, P0(EndRound))
cc 12b2f4205ef7618bed6cd1e5d1a824d8d1206546d21d4bc894eac5bf3739b731 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 5, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 1), (E.Hydro, 6), (E.Electro, 8), (E.Dendro, 3)]), char_states: [CharState { char_id: SangonomiyaKokomi, hp: 6, energy: 0, applied: EnumSet(Hydro), flags: EnumSet() }, CharState { char_id: KujouSara, hp: 8, energy: 2, applied: EnumSet(Hydro), flags: EnumSet() }, CharState { char_id: Nahida, hp: 9, energy: 0, applied: EnumSet(Hydro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | DiceDistribution | TriggerEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Equipment(2, Artifact, ThunderingFury), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(1, Artifact, BlizzardStrayer), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, SangonomiyaShrine), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [TheScentRemained, IGotYourBack, QuickKnit], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 2), (E.Pyro, 3), (E.Hydro, 1), (E.Cryo, 1), (E.Anemo, 1)]), char_states: [CharState { char_id: Barbara, hp: 10, energy: 3, applied: EnumSet(Hydro), flags: EnumSet() }, CharState { char_id: Fischl, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Chongyun, hp: 10, energy: 1, applied: EnumSet(Hydro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | DiceDistribution | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_Burst), _status_entries: [StatusEntry { key: Equipment(0, Artifact, CrimsonWitchOfFlames), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(1, Artifact, TravelingDoctorsHandkerchief), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(MelodyLoop), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, Wagner), state: AppliedEffectState { usages_duration: 0, counter: 5, once_per_round: true } }] }, hand: [MaskOfSolitudeBasalt, ElementalResonanceWovenFlames], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(14767990519361595141), _hash: ZobristHasher(14767990519361595141) } }, P0(EndRound))
cc db400788b4e86dc9107739392a144a52ac32f0e636c0d927df6c9b24b1f59f59 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 5, phase: ActionPhase { first_end_round: Some(PlayerSecond), active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 2, dice: DiceCounter([(Omni, 2), (E.Hydro, 1), (E.Cryo, 4)]), char_states: CharStates { char_states: [CharState { char_id: Beidou, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }, CharState { char_id: Chongyun, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn0), total_dmg_taken: 0 }, CharState { char_id: RhodeiaOfLoch, hp: 9, energy: 1, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn2), total_dmg_taken: 2 }] }, status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | OutgoingDMG | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_Skill), _status_entries: [StatusEntry { key: Equipment(1, Artifact, ViridescentVenerersDiadem), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(2, Artifact, LaurelCoronet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(0, Weapon, SacrificialGreatsword), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(2, MushroomPizza), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Character(2, Satiated), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(OceanidMimicSquirrel), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(OceanidMimicRaptor), state: AppliedEffectState { usages_duration: 3, counter: 0, once_per_round: true } }] }, hand: [SkywardHarp, Tubby], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 3), (E.Cryo, 1), (E.Dendro, 1), (E.Geo, 1), (E.Anemo, 2)]), char_states: CharStates { char_states: [CharState { char_id: Venti, hp: 4, energy: 2, applied: EnumSet(Electro), flags: EnumSet(), total_dmg_taken: 12 }] }, status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(Skill_Self_Skill), _status_entries: [StatusEntry { key: Equipment(0, Artifact, LuckyDogsSilverCirclet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(0, Stormzone), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, IronTongueTian), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot1, SangonomiyaShrine), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [MushroomPizza, SendOff, PaidInFull], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(2056141284582666141), _hash: ZobristHasher(2056141284582666141) } }, P0(EndRound))
cc ff68934eb1d713f1bd7285c6a08fe0632895d6e146caca2917c6f464d60f00dd # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 1), (E.Hydro, 2), (E.Cryo, 4), (E.Electro, 1)]), char_states: CharStates { char_states: [CharState { char_id: Chongyun, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(PlungingAttack), total_dmg_taken: 0 }, CharState { char_id: Nilou, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }, CharState { char_id: Kaeya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [SkywardSpine, ColdBloodedStrike, SacrificialSword, Starsigns, LandsOfDandelion], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 1), (E.Pyro, 1), (E.Cryo, 1), (E.Electro, 4), (E.Dendro, 1)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(PlungingAttack), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(635194961974488132), _hash: ZobristHasher(635194961974488132) } }, P0(PlayCard(Starsigns, None)))
cc b54b5f4677c89629bfdc91cbb8846a92aa2334f5a32649abc4fd4f074832a9ef # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 2), (E.Hydro, 1), (E.Electro, 2), (E.Dendro, 1), (E.Geo, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Fischl, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(PlungingAttack), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [WineStainedTricorne, MondstadtHashBrown, CalxsArts, LiuSu, ColdBloodedStrike], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 0, dice: DiceCounter([(E.Pyro, 2), (E.Cryo, 2), (E.Electro, 1), (E.Dendro, 1), (E.Anemo, 2)]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(PlungingAttack), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(3832857331355204761), _hash: ZobristHasher(3832857331355204761) } }, P0(PlayCard(CalxsArts, None)))
cc af4623d9f316308d07655d1791cedcddefed9a02c845c9c89965192b8dff54c3 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { state: Start { to_select: PlayerFirst } }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(4859632520280752661), _hash: ZobristHasher(4859632520280752661) } }, P0(SwitchCharacter(0)))
cc fb0aeb03097f2140dbba1ccb5cffa841e89979c56d22925e9c63ab199e3c2cd3 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { state: Start { to_select: PlayerFirst } }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(4859632520280752661), _hash: ZobristHasher(4859632520280752661) } }, P0(SwitchCharacter(0)))
cc 21ba839df5038327fa4b00aca8ab12e5ecdfea3e29532beefe5395e1e4e9a799 # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { state: Start { to_select: PlayerFirst } }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }, CharState { char_id: Kaeya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(17519979992313673834), _hash: ZobristHasher(17519979992313673834) } }, P0(SwitchCharacter(1)))
cc 47e36545ed161c6b058b4179b64be81ae29a7621efd3fbc34f374c3677d9c9bd # shrinks to (gs, action) = (GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { state: Start { to_select: PlayerFirst } }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }, CharState { char_id: Kaeya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([]), char_states: CharStates { char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: true, _incremental_hash: ZobristHasher(17519979992313673834), _hash: ZobristHasher(17519979992313673834) } }, P0(SwitchCharacter(1)))
