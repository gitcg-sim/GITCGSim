# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc a753ecc46a6202a2a0bd4b846450b6e89a78d5545373335273ed8fa61d7b73b5 # shrinks to gs = GameState { pending_cmds: None, round_number: 1, phase: SelectStartingCharacter { already_selected: None }, players: ByPlayer(PlayerState { active_char_index: 0, dice: DiceCounter([]), char_states: [CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }, PlayerState { active_char_index: 0, dice: DiceCounter([]), char_states: [CharState { char_id: Fischl, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(6176813755000886287), _hash: ZobristHasher(6176813755000886287) }, a = 0, b = 0
cc 0a94f9c5738a87cda650a9ab505d6f2529d7eaf2766a8ef90ad029a3ff37045b # shrinks to gs = GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(E.Cryo, 2)]), char_states: CharStates { char_states: [CharState { char_id: Kaeya, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn0) }] }, status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | TriggerEvent), responds_to_triggers: EnumSet(Switched), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Equipment(0, Artifact, WineStainedTricorne), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, LiuSu), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [ElementalResonanceWovenIce, NaganoharaMeteorSwarm], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_idx: 2, dice: DiceCounter([(Omni, 3), (E.Pyro, 2), (E.Cryo, 1), (E.Geo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Ningguang, hp: 8, energy: 0, applied: EnumSet(), flags: EnumSet(PlungingAttack) }, CharState { char_id: Xiangling, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Ganyu, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [UndividedHeart, BlizzardStrayer, NorthernSmokedChicken, KyoukaFuushi, ViridescentVenerer], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(17602637233901423508), _hash: ZobristHasher(17602637233901423508) } }
cc 85df715f7ac08dd9148d885297f4d6f715c46cb9e4cb32437efd45b236605ede # shrinks to gs = GameStateWrapper { game_state: GameState { pending_cmds: None, round_number: 1, phase: ActionPhase { first_end_round: None, active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 1), (E.Hydro, 1), (E.Cryo, 1), (E.Electro, 1), (E.Geo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Xiangling, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn1), total_dmg_taken: 0 }, CharState { char_id: Yoimiya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }, CharState { char_id: Kaeya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(TriggerEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Summon(Guoba), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }] }, hand: [IronTongueTian, Rust, ShakenNotPurred, FavoniusSword, ArchaicPetra], flags: EnumSet() }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 5), (E.Pyro, 1), (E.Dendro, 1), (E.Anemo, 1)]), char_states: CharStates { char_states: [CharState { char_id: Kaeya, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(PlungingAttack), total_dmg_taken: 0 }] }, status_collection: StatusCollection { responds_to: EnumSet(), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(), _status_entries: [] }, hand: [SteadyBreathing, GamblersEarrings, AdventurersBandana, CalxsArts], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, _incremental_hash: ZobristHasher(3895286189519191558), _hash: ZobristHasher(3895286189519191558) } }
cc 366e6f6ed54f6052167fb72e5f69b17a93fabdafdfddf4520334ad50120db86c # shrinks to gs = GameStateWrapper { game_state: GameState { round_number: 4, phase: ActionPhase { first_end_round: Some(PlayerFirst), active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_idx: 1, dice: DiceCounter([(Omni, 2), (E.Pyro, 3), (E.Dendro, 3), (E.Geo, 7), (E.Anemo, 2)]), flags: EnumSet(), char_states: CharStates { char_states: CappedLengthList8 { len: 2, array: [CharState { char_id: FatuiPyroAgent, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Pyro | Geo), active_elem: Some(Pyro), elem_order: [Hydro, Cryo, Electro, Dendro, Anemo, Geo, Pyro] }) }, CharState { char_id: Noelle, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Pyro | Geo), active_elem: Some(Geo), elem_order: [Hydro, Cryo, Electro, Dendro, Anemo, Pyro, Geo] }) }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }], _marker: PhantomData<()> } }, hand: CappedLengthList8 { len: 4, array: [RightOfFinalInterpretation, UndividedHeart, DescentOfDivinity, SanguineRouge, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard], _marker: PhantomData<()> } }, PlayerState { active_char_idx: 1, dice: DiceCounter([(Omni, 1)]), flags: EnumSet(), char_states: CharStates { char_states: CappedLengthList8 { len: 3, array: [CharState { char_id: Xiao, hp: 7, energy: 1, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 3, element_priority: Some(ElementPriority { important_elems: EnumSet(Hydro | Geo | Anemo), active_elem: Some(Anemo), elem_order: [Pyro, Cryo, Electro, Dendro, Hydro, Geo, Anemo] }) }, CharState { char_id: SangonomiyaKokomi, hp: 4, energy: 2, applied: EnumSet(Hydro), flags: EnumSet(SkillCastedThisTurn0 | SkillCastedThisTurn1), total_dmg_taken: 6, element_priority: Some(ElementPriority { important_elems: EnumSet(Hydro | Geo | Anemo), active_elem: Some(Hydro), elem_order: [Pyro, Cryo, Electro, Dendro, Geo, Anemo, Hydro] }) }, CharState { char_id: Ningguang, hp: 5, energy: 2, applied: EnumSet(Pyro), flags: EnumSet(), total_dmg_taken: 5, element_priority: Some(ElementPriority { important_elems: EnumSet(Hydro | Geo | Anemo), active_elem: Some(Geo), elem_order: [Pyro, Cryo, Electro, Dendro, Hydro, Anemo, Geo] }) }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }], _marker: PhantomData<()> } }, hand: CappedLengthList8 { len: 1, array: [WangshuInn, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard], _marker: PhantomData<()> } }), _incremental_hash: ZobristHasher(12277509998429259114), _hash: ZobristHasher(12277509998429259114), ignore_costs: false, pending_cmds: None, status_collections: ByPlayer(StatusCollection { responds_to: EnumSet(TriggerEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), status_entries: [StatusEntry { key: Support(Slot0, IronTongueTian), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, StatusCollection { responds_to: EnumSet(OutgoingDMG | DiceDistribution | TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(DMG_Self_NR_D | DMG_Self_R_D), status_entries: [StatusEntry { key: Equipment(2, Artifact, GamblersEarrings), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(0, Weapon, SkywardSpine), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(BakeKurage), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Support(Slot0, JadeChamber), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }), log: None } }
cc 9ea4447b4f91a0a9af4b43a9117f91b097007eb78fdf1a42a7d1bb5b64eb9eea # shrinks to gs = GameStateWrapper { game_state: GameState { round_number: 3, phase: ActionPhase { first_end_round: None, active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 5), (E.Pyro, 1), (E.Hydro, 2), (E.Electro, 4), (E.Geo, 1), (E.Anemo, 2)]), flags: EnumSet(), char_states: CharStates { char_states: CappedLengthList8 { len: 3, array: [CharState { char_id: Wanderer, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Electro | Anemo), active_elem: Some(Anemo), elem_order: [Pyro, Hydro, Cryo, Dendro, Geo, Electro, Anemo] }) }, CharState { char_id: Sucrose, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Electro | Anemo), active_elem: Some(Anemo), elem_order: [Pyro, Hydro, Cryo, Dendro, Geo, Electro, Anemo] }) }, CharState { char_id: YaeMiko, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Electro | Anemo), active_elem: Some(Electro), elem_order: [Pyro, Hydro, Cryo, Dendro, Geo, Anemo, Electro] }) }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }], _marker: PhantomData<()> } }, hand: CappedLengthList8 { len: 0, array: [BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard], _marker: PhantomData<()> } }, PlayerState { active_char_idx: 0, dice: DiceCounter([(Omni, 5), (E.Electro, 2), (E.Dendro, 1), (E.Geo, 1)]), flags: EnumSet(ChargedAttack | DiedThisRound), char_states: CharStates { char_states: CappedLengthList8 { len: 2, array: [CharState { char_id: Shenhe, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }, CharState { char_id: YaeMiko, hp: 7, energy: 1, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 3, element_priority: Some(ElementPriority { important_elems: EnumSet(Cryo | Electro), active_elem: Some(Electro), elem_order: [Pyro, Hydro, Dendro, Geo, Anemo, Cryo, Electro] }) }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }], _marker: PhantomData<()> } }, hand: CappedLengthList8 { len: 3, array: [FloralSidewinder, LandsOfDandelion, ElementalResonanceWovenIce, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard], _marker: PhantomData<()> } }), _incremental_hash: ZobristHasher(5995826543362609849), _hash: ZobristHasher(16910102407965472622), ignore_costs: false, pending_cmds: Some(PendingCommands { suspended_state: PostDeathSwitch { player_id: PlayerSecond, character_statuses_to_shift: [None, None] }, pending_cmds: [(CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: SpringSpiritSummoning }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, TriggerXEvent(DMG(XEventDMG { src_player_id: PlayerSecond, tgt_char_idx: 0, dmg_value: 3, dmg_type: Elemental(Cryo), dmg_info: DMGInfo { target_hp: 3, target_affected_by_riptide: false }, reaction: Some((Superconduct, None)), defeated: true }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: SpringSpiritSummoning }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, TriggerXEvent(DMG(XEventDMG { src_player_id: PlayerSecond, tgt_char_idx: 0, dmg_value: 3, dmg_type: Piercing, dmg_info: DMGInfo { target_hp: 3, target_affected_by_riptide: false }, reaction: None, defeated: false }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: SpringSpiritSummoning }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, ApplyStatusToTeam(IcyQuill)), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: SpringSpiritSummoning }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, AddEnergy(1, Active)), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: SpringSpiritSummoning }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, TriggerXEvent(Skill(XEventSkill { src_player_id: PlayerSecond, src_char_idx: 0, skill_id: SpringSpiritSummoning }))), (CommandContext { src_player_id: PlayerSecond, src: Skill { char_idx: 0, skill_id: SpringSpiritSummoning }, tgt: Some(CommandTarget { player_id: PlayerFirst, char_idx: 0 }) }, HandOverPlayer)] }), status_collections: ByPlayer(StatusCollection { responds_to: EnumSet(OutgoingDMG | OutgoingDMGTarget | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_Burst), status_entries: [StatusEntry { key: Equipment(0, Artifact, OrnateKabuto), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, StatusCollection { responds_to: EnumSet(TriggerEvent | TriggerXEvent), responds_to_triggers: EnumSet(EndPhase | DeclareEndOfRound), responds_to_events: EnumSet(Skill_Self_Skill), status_entries: [StatusEntry { key: Equipment(0, Artifact, LuckyDogsSilverCirclet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(SesshouSakura), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }), log: None } }
cc f3adcf2862868a5915169b98bdc8d1cc18de406dfa614508523ccd06bec12039 # shrinks to gs = GameStateWrapper { game_state: GameState { round_number: 2, phase: ActionPhase { first_end_round: Some(PlayerFirst), active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_idx: 1, dice: DiceCounter([(Omni, 3), (E.Dendro, 2)]), flags: EnumSet(), char_states: CharStates { char_states: CappedLengthList8 { len: 3, array: [CharState { char_id: Ningguang, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet(SkillCastedThisTurn0), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Pyro | Dendro | Geo), active_elem: Some(Geo), elem_order: [Hydro, Cryo, Electro, Anemo, Pyro, Dendro, Geo] }) }, CharState { char_id: Nahida, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Pyro | Dendro | Geo), active_elem: Some(Dendro), elem_order: [Hydro, Cryo, Electro, Anemo, Pyro, Geo, Dendro] }) }, CharState { char_id: Xiangling, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Pyro | Dendro | Geo), active_elem: Some(Pyro), elem_order: [Hydro, Cryo, Electro, Anemo, Dendro, Geo, Pyro] }) }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }], _marker: PhantomData<()> } }, hand: CappedLengthList8 { len: 1, array: [SacrificialBow, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard], _marker: PhantomData<()> } }, PlayerState { active_char_idx: 2, dice: DiceCounter([(E.Hydro, 1), (E.Electro, 1), (E.Dendro, 2)]), flags: EnumSet(ChargedAttack), char_states: CharStates { char_states: CappedLengthList8 { len: 3, array: [CharState { char_id: Candace, hp: 7, energy: 2, applied: EnumSet(Hydro), flags: EnumSet(SkillCastedThisTurn1), total_dmg_taken: 3, element_priority: Some(ElementPriority { important_elems: EnumSet(Hydro), active_elem: Some(Hydro), elem_order: [Pyro, Cryo, Electro, Dendro, Geo, Anemo, Hydro] }) }, CharState { char_id: StonehideLawachurl, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }, CharState { char_id: Barbara, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: Some(ElementPriority { important_elems: EnumSet(Hydro), active_elem: Some(Hydro), elem_order: [Pyro, Cryo, Electro, Dendro, Geo, Anemo, Hydro] }) }, CharState { char_id: Yoimiya, hp: 0, energy: 0, applied: EnumSet(), flags: EnumSet(), total_dmg_taken: 0, element_priority: None }], _marker: PhantomData<()> } }, hand: CappedLengthList8 { len: 0, array: [BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard, BlankCard], _marker: PhantomData<()> } }), _incremental_hash: ZobristHasher(15300415992730531591), _hash: ZobristHasher(15300415992730531591), ignore_costs: false, pending_cmds: None, status_collections: ByPlayer(StatusCollection { responds_to: EnumSet(TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_Skill), status_entries: [StatusEntry { key: Equipment(0, Artifact, LuckyDogsSilverCirclet), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Character(2, Satiated), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, StatusCollection { responds_to: EnumSet(IncomingDMG | OutgoingDMG | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(DMG_Opp_NR_ND | DMG_Opp_NR_D | DMG_Opp_R_ND | DMG_Opp_R_D), status_entries: [StatusEntry { key: Character(1, Stonehide), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Character(1, StoneForce), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }), log: None } }
