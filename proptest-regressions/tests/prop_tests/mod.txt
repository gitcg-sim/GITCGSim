cc f9cb3d193f8c9afccf52dcdc8c631d2d14e01d4bb6f6f773d53e8379359d70a2 # shrinks to gs = GameState { pending_cmds: None, round_number: 3, phase: ActionPhase { first_end_round: None, active_player: PlayerSecond }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 2), (Elem(Pyro), 1), (Elem(Hydro), 1), (Elem(Geo), 3), (Elem(Anemo), 1)]), char_states: [CharState { char_id: FatuiPyroAgent, hp: 10, energy: 2, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Xingqiu, hp: 10, energy: 1, applied: EnumSet(), flags: EnumSet() }, CharState { char_id: Mona, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(IncomingDMG | OutgoingDMG | OutgoingReactionDMG | TriggerXEvent | SwitchIsFastAction), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Opp_NA | Skill_Opp_Skill | Skill_Opp_Burst), _status_entries: [StatusEntry { key: Character(0, Stealth), state: AppliedEffectState { usages_duration: 2, counter: 0, once_per_round: true } }, StatusEntry { key: Character(2, IllusoryTorrent), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(1, Weapon, AquilaFavonia), state: AppliedEffectState { usages_duration: 0, counter: 2, once_per_round: true } }, StatusEntry { key: Support(Slot0, Katheryne), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [PaidInFull, FavoniusSword, LaurelCoronet], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 7), (Elem(Pyro), 1), (Elem(Hydro), 1), (Elem(Cryo), 9), (Elem(Electro), 1), (Elem(Dendro), 1), (Elem(Geo), 2), (Elem(Anemo), 2)]), char_states: [CharState { char_id: KamisatoAyaka, hp: 3, energy: 0, applied: EnumSet(Pyro), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(TriggerEvent), responds_to_triggers: EnumSet(Switched), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Character(0, KamisatoArtSenho), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [SacrificialSword, AquilaFavonia, Wagner, ShakenNotPurred], flags: EnumSet(ChargedAttack) }), log: EventLog { enabled: false }, ignore_costs: false, tactical: false, _incremental_hash: ZobristHasher(10090919627531267637), _hash: ZobristHasher(2152849096015223450) }, action = PlayCard(ShakenNotPurred, Some(OwnCharacter(1))), player_id = PlayerSecond
cc 8e1f99723d32f7d7a95b4afb6809aa9646f807eb4bcdb986695d3429f388dff3 # shrinks to gs = GameState { pending_cmds: None, round_number: 3, phase: ActionPhase { first_end_round: None, active_player: PlayerFirst }, players: ByPlayer(PlayerState { active_char_index: 1, dice: DiceCounter([(Omni, 3), (Elem(Hydro), 2), (Elem(Cryo), 2), (Elem(Electro), 2), (Elem(Dendro), 2), (Elem(Geo), 3)]), char_states: [CharState { char_id: Diona, hp: 7, energy: 1, applied: EnumSet(Hydro), flags: EnumSet() }, CharState { char_id: Noelle, hp: 10, energy: 0, applied: EnumSet(), flags: EnumSet() }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | OutgoingDMG | DiceDistribution | TriggerXEvent), responds_to_triggers: EnumSet(), responds_to_events: EnumSet(Skill_Self_Skill), _status_entries: [StatusEntry { key: Equipment(1, Artifact, ViridescentVenerer), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }, StatusEntry { key: Equipment(0, Weapon, SacrificialBow), state: AppliedEffectState { usages_duration: 0, counter: 0, once_per_round: true } }] }, hand: [SacrificialSword, UndividedHeart, Crossfire, LuckyDogsSilverCirclet, SacrificialFragments], flags: EnumSet(ChargedAttack) }, PlayerState { active_char_index: 0, dice: DiceCounter([(Omni, 6), (Elem(Pyro), 2), (Elem(Hydro), 2), (Elem(Dendro), 1), (Elem(Geo), 1), (Elem(Anemo), 1)]), char_states: [CharState { char_id: Barbara, hp: 10, energy: 0, applied: EnumSet(Hydro), flags: EnumSet(SkillCastedThisTurn2) }], status_collection: StatusCollection { responds_to: EnumSet(UpdateCost | TriggerEvent), responds_to_triggers: EnumSet(EndPhase), responds_to_events: EnumSet(), _status_entries: [StatusEntry { key: Team(ChangingShifts), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }, StatusEntry { key: Summon(MelodyLoop), state: AppliedEffectState { usages_duration: 1, counter: 0, once_per_round: true } }] }, hand: [NaganoharaMeteorSwarm, ElementalResonanceFerventFlames], flags: EnumSet() }), log: EventLog { enabled: false }, ignore_costs: false, tactical: false, _incremental_hash: ZobristHasher(8289354062876991547), _hash: ZobristHasher(4382105947952636977) }, action = PlayCard(SacrificialFragments, Some(OwnCharacter(2))), player_id = PlayerFirst
