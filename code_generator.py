import re

enums_file = "./src/ids/enums.rs"
characters_file = "./src/cards/characters/mod.rs"
macros_file = "./src/ids/lookup/generated_code.rs"

template_characters = """
// Generated by code_generator.py
use crate::types::{card_defs::*, command::*, game_state::*};
use crate::{decl_status_impl_type, decl_summon_impl_type, list8};

use crate::cards::{builders::*, ids::*};
use crate::data_structures::CommandList;
use crate::status_impls::prelude::*;
use crate::status_impls::primitives::all::*;

use super::ids::lookup::GetCharCard;

<modules>

pub(crate) mod char_reexports {
    crate::__generated_char_reexports!();
}

impl GetCharCard for CharId {
    #[inline]
    fn get_char_card(self: CharId) -> &'static CharCard {
        crate::__generated_enum_cases!(CharId, self, &C)
    }
}"""


template_macros = """
// Generated by code_generator.py
#[macro_export]
macro_rules! __generated_char_reexports {
    () => {
<reexports>
    }
}

#[macro_export]
macro_rules! __generated_skills_cases {
    ($expr: expr) => {
        match $expr {
<skills>
        }
    }
}

#[macro_export]
macro_rules! __generated_enum_cases {
<body>
}
"""

pat_enum = re.compile('^\s*pub enum (\w+)\s+.*$')
pat_entry = re.compile('^\s*(\w+)\,\s*$')
pat_split = re.compile('^(I{2,}|[A-Z][a-z]+|[0-9]+)')

def snake_case(name):
    if name == 'AThousandFloatingDreams':
        return 'a_thousand_floating_dreams'
    if name == 'IHaventLostYet':
        return 'i_havent_lost_yet'
    if name == 'IGotYourBack':
        return 'i_got_your_back'
    if name == 'SparksNSplash':
        return 'sparks_n_splash'
    if name == 'TossNTurnSpear':
        return 'toss_n_turn_spear'

    parts = []
    while len(name):
        m = pat_split.match(name)
        if not m: break

        word = m.group(1)
        name = name[len(word):]
        parts.append(word.lower())

    return '_'.join(parts)

indent = '    '
enums = {}
lines = list(open(enums_file, 'r'))
it = iter(lines)
try:
    while True:
        enum_name, values = None, []
        while True:
            line = next(it)
            m = pat_enum.match(line)
            if not m: continue
            enum_name = m.group(1)
            break

        while True:
            line = next(it)
            if '}' in line:
                enums[enum_name] = values
                break

            m = pat_entry.match(line)
            if not m:
                continue
            values.append(m.group(1))

except StopIteration:
    pass


def status_cases(type, suffix, prefix = '', mapping = '{}'):
    return '\n'.join(
        '{}{}::{} => {},'.format(
            indent * 3, type, name,
            mapping.format(
                '{}{}::{}'.format(prefix, snake_case(name), suffix)
            )
        )
        for name in enums[type]
    )


def characters():
    modules = '\n'.join(
        'pub mod {};'.format(snake_case(name)) for name in enums['CharId']
    )
    return template_characters.replace('<modules>', modules)


def macros():
    body = []

    reexports = '\n'.join(
        '{}pub use super::{}::*;'.format(2 * indent, snake_case(name)) for name in sorted(enums['CharId'])
    )

    mapping_part = ' $(, | $val: ident | $blk: block $(,)?)?'
    for key in enums.keys():
        for p in ['&']:
            body.append('{}({}, $expr: expr, {} $I: ident{}) => {}'.format(indent, key, p, mapping_part, '{'))
            body.append('{}match $expr {}'.format(indent * 2, '{'))
            body.append(status_cases(key, '$I', p, '$crate::__mapping!({}, $(| $val | $blk)?)'))
            body.append('{}{}'.format(indent * 2, '}'))
            body.append('{}{}'.format(indent, '};'))
            body.append('')

    skills = '\n'.join(
        '{}SkillId::{} => &{},'.format(indent * 3, name, snake_case(name).upper())
        for name in enums['SkillId']
    )
    return (template_macros
        .replace('<reexports>', reexports)
        .replace('<body>', '\n'.join(body))
        .replace('<skills>', skills)
    )


if __name__ == '__main__':
    with open(characters_file, 'w') as f:
        print(characters(), file=f)

    with open(macros_file, 'w') as f:
        print(macros(), file=f)
