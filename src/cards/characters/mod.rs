
// Generated by code_generator.py
use crate::types::{card_defs::*, command::*, game_state::*};
use crate::{decl_status_impl_type, decl_summon_impl_type, list8};

use crate::cards::{builders::*, ids::*};
use crate::data_structures::CommandList;
use crate::status_impls::prelude::*;
use crate::status_impls::primitives::all::*;

use super::ids::lookup::GetCharCard;

pub mod yoimiya;
pub mod kaeya;
pub mod fischl;
pub mod kamisato_ayaka;
pub mod ganyu;
pub mod noelle;
pub mod xingqiu;
pub mod collei;
pub mod ningguang;
pub mod xiangling;
pub mod fatui_pyro_agent;
pub mod chongyun;
pub mod klee;
pub mod diona;
pub mod barbara;
pub mod bennett;
pub mod mona;
pub mod keqing;
pub mod sucrose;
pub mod jean;
pub mod razor;
pub mod cyno;
pub mod jadeplume_terrorshroom;
pub mod diluc;
pub mod sangonomiya_kokomi;
pub mod kujou_sara;
pub mod eula;
pub mod stonehide_lawachurl;
pub mod kamisato_ayato;
pub mod arataki_itto;
pub mod tighnari;
pub mod raiden_shogun;
pub mod tartaglia;
pub mod nahida;
pub mod hu_tao;
pub mod amber;
pub mod rhodeia_of_loch;
pub mod yae_miko;
pub mod beidou;
pub mod yanfei;
pub mod shenhe;
pub mod candace;
pub mod xiao;
pub mod albedo;

pub(crate) mod char_reexports {
    crate::__generated_char_reexports!();
}

impl GetCharCard for CharId {
    #[inline]
    fn get_char_card(self: CharId) -> &'static CharCard {
        crate::__generated_enum_cases!(CharId, self, &C)
    }
}
